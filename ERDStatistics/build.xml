<?xml version="1.0" encoding="UTF-8"?><!-- You may freely edit this file. See commented blocks below for --><!-- some examples of how to customize the build. --><!-- (If you delete it and reopen the project it will be recreated.) --><!-- By default, only the Clean and Build commands use this build script. --><project name="ERDStatistics" default="default" basedir="." xmlns:fx="javafx:com.sun.javafx.tools.ant">
    <description>Builds, tests, and runs the project ERDStatistics.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. Those of them relevant for JavaFX project are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-jfx-jar:              called before FX SDK specific <fx:jar> task
      -post-jfx-jar:             called after FX SDK specific <fx:jar> task
      -pre-jfx-deploy:           called before FX SDK specific <fx:deploy> task
      -post-jfx-deploy:          called after FX SDK specific <fx:deploy> task
      -pre-jfx-native:           called just after -pre-jfx-deploy if <fx:deploy> runs in native packaging mode
      -post-jfx-native:          called just after -post-jfx-deploy if <fx:deploy> runs in native packaging mode
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting a HTML postprocessor after javaFX SDK deployment:

        <target name="-post-jfx-deploy">
            <basename property="jfx.deployment.base" file="${jfx.deployment.jar}" suffix=".jar"/>
            <property name="jfx.deployment.html" location="${jfx.deployment.dir}${file.separator}${jfx.deployment.base}.html"/>
            <custompostprocess>
                <fileset dir="${jfx.deployment.html}"/>
            </custompostprocess>
        </target>

    Example of calling an Ant task from JavaFX SDK. Note that access to JavaFX SDK Ant tasks must be
    initialized; to ensure this is done add the dependence on -check-jfx-sdk-version target:

        <target name="-post-jfx-jar" depends="-check-jfx-sdk-version">
            <echo message="Calling jar task from JavaFX SDK"/>
            <fx:jar ...>
                ...
            </fx:jar>
        </target>

    For more details about JavaFX SDK Ant tasks go to
    http://docs.oracle.com/javafx/2/deployment/jfxpub-deployment.htm

    For list of available properties check the files
    nbproject/build-impl.xml and nbproject/jfx-impl.xml.

    -->
    <target name="db-init"
            description="Initialize parameters for db export and import">
        <echo message="Initialize parameters for db export and import"/>
        <property name="USER" value="erd"/>
        <property name="PW" value="erd"/>
        <property name="HOST" value="localhost"/>
        <property name="PORT" value="3306"/>
        <property name="INSTANCE" value="erd"/>
        <tstamp>
            <format property="DATE" pattern="yyyyMMdd"/>
        </tstamp>      
        <!--
        <echo message="${USER}"/>
        <echo message="${PW}"/>
        <echo message="${HOST}"/>
        <echo message="${PORT}"/>
        <echo message="${INSTANCE}"/>
        <echo message="${DATE}"/>
        -->
    </target>
         
    <target name="db-export" 
            description="export db data, structure and stored procedures and zip the files" 
	    depends="db-init, db-export-database, db-export-datastructure, db-export-storedprocedure, db-export-zip">
        <echo message="Export db data, structure and stored proceduresdatabase ERD into SQL-File"/>
    </target>
	
    <target name="db-export-database" description="export data of schema">
        <echo message="Export data of database ERD into SQL-File"/>
        <exec executable="mysqldump" output=".\database\dumps\data.sql">
            <arg value="--user=${USER}"/>
            <arg value="--password=${PW}"/>
            <arg value="--host=${HOST}"/>
            <arg value="--port=${PORT}"/>
            <arg value="erd"/>
	</exec>
    </target>

    <target name="db-export-datastructure" description="export only data structure of schema">
	<echo message="Export data structure of database ERD into SQL-File"/>
	<exec executable="mysqldump" output=".\database\dumps\datastructure.sql">
            <arg value="--user=${USER}"/>
            <arg value="--password=${PW}"/>
            <arg value="--host=${HOST}"/>
            <arg value="--port=${PORT}"/>
            <arg value="${INSTANCE}"/>
            <arg value="--no-data"/>
	</exec>
    </target>

    <target name="db-export-storedprocedure" description="export stored procedure and functions of schema">
	<echo message="Export Stored Procedures and Functions of database ERD into SQL-File"/>
	<exec executable="mysqldump" output=".\database\dumps\storedprocedure.sql">
            <arg value="--user=${USER}"/>
            <arg value="--password=${PW}"/>
            <arg value="--host=${HOST}"/>
            <arg value="--port=${PORT}"/>
            <arg value="erd"/>
            <arg value="--no-data"/>
            <arg value="--routines"/>
	</exec>
    </target>

    <target name="db-export-zip" 
            description="zip exported files of data, stored procedure and functions of schema"
            depends="db-init">
        <echo message="Zip exported files of Data, Stored Procedures and Functions of database ERD"/>
        <zip destfile="database/dumps_${DATE}.zip"
             basedir="database/dumps"/>
    </target>

    <target name="db-import-database" description="import data of schema">
	<echo message="Import data of database ERD from SQL-File"/>		
    </target>
	
    <target name="db-import-datastructure" description="import only data structure of schema">
	<echo message="Import data structure of database ERD from SQL-File"/>
    </target>

    <target name="db-import-storedprocedure" description="import stored proceudre and functions of schema">
	<echo message="Import Stored Procedures and Functions of database ERD from SQL-File"/>
    </target>

</project>
